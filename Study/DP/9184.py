# 신나는 함수 실행 DP try6
# 한번 구하면 다시 구해진수 이전은 다시 구하지 않는 방법으로 수정하자
memo = [
    [
        [
            0 for _ in range(21)
        ] for _ in range(21)
    ] for _ in range(21)
]
# 1 이 아닌 0으로 변경
def w(a,b,c):
    if a <= 0 or b <= 0 or c <= 0:
        return 1
    if a > 20 or b > 20 or c > 20:
        return w(20,20,20)
    if memo[a][b][c]:
        return memo[a][b][c]
    if a < b and b < c:
        memo[a][b][c] = w(a,b,c-1) + w(a,b-1,c-1) - w(a,b-1,c)
        return memo[a][b][c]
    memo[a][b][c] = w(a-1,b,c) + w(a-1,b-1,c) + w(a-1,b,c-1) - w(a-1,b-1,c-1)
    return memo[a][b][c]


while True:
    a,b,c = map(int,input().split())
    # 세 변수 모두 -1 인경우의 종료 조건을 생성
    if a == -1 and b == -1 and c == -1:
        break

    ans = w(a,b,c)

    print(f"w({a}, {b}, {c}) = {ans}")


'''
dp 문제 해결을 할 때 항상 새로운 값이 입력되는 경우와
고정된 값을 이용해서 구하는 경우를 구분해서 생각한다면 더 좋을 것 같다
이말이 무슨말이냐면 피보나치 수열을 이용한다고 할때 

ex) 1 + 1 + 2 + 3 + 5
[1,1,2,3,5] 이렇게 리스트에 값이 저장된다.
근데 특정 정해진 패턴 안에서  i = i-1 + i-2 라는 패턴만 유지되고
i 값이 매 동작 마다 바뀌는 것을 새로운 값이 입력되는 경우이다. 
이러한 경우에는 memo 배열을 새로 항상 만들면서 풀어도 될 것 같다.
하지만 위 9184 문제의 경우에는 a,b,c 라는 n 번째의 값이 변동 될뿐 
패턴은 동일하고 안에 있는 고정적인 수들은 바뀌지 않는다 따라서 
이전에 w(7,3,1)의 값을 구해 뒀다면 다음엔 이 값을 구하기위해 재귀적으로
들어가지 않고 memo에 저장된 값을 불러서 사용하기만 하면된다.

이러한 경우들을 문제를 해결하기전에 먼저 판단하고 어떻게 DP 알고리즘을
활용할지 생각한다면 시간적으로 더 좋은 효율이 나오지 않을까? 라는 생각이 들었다.  
'''